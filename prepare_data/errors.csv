CWE-ID,name,tool_name
14,Compiler Removal of Code to Clear Buffers,AppChecker
22,Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'),AppChecker
79,Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'),AppChecker
89,Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection'),AppChecker
94,Improper Control of Generation of Code ('Code Injection'),AppChecker
95,Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection'),AppChecker
103,Struts: Incomplete validate() Method Definition,AppChecker
113,Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting'),AppChecker
114,Process Control,AppChecker
117,Improper Output Neutralization for Logs,AppChecker
120,Buffer Copy without Checking Size of Input ('Classic Buffer Overflow'),AppChecker
121,Stack-based Buffer Overflow,AppChecker
125,Out-of-bounds Read,AppChecker
134,Uncontrolled Format String,AppChecker
135,Incorrect Calculation of Multi-Byte String Length,AppChecker
170,Improper Null Termination,AppChecker
194,Unexpected Sign Extension,AppChecker
196,Unsigned to Signed Conversion Error,AppChecker
197,Numeric Truncation Error,AppChecker
209,Information Exposure Through an Error Message,AppChecker
213,Intentional Information Exposure,AppChecker
215,Information Exposure Through Debug Information,AppChecker
242,Use of Inherently Dangerous Function,AppChecker
245,J2EE Bad Practices: Direct Management of Connections,AppChecker
252,Unchecked Return Value,AppChecker
253,Incorrect Check of Function Return Value,AppChecker
259,Use of Hard-coded Password,AppChecker
275,Permission Issues,AppChecker
312,Cleartext Storage of Sensitive Information,AppChecker
327,Use of a Broken or Risky Cryptographic Algorithm,AppChecker
337,Predictable Seed in PRNG,AppChecker
347,Improper Verification of Cryptographic Signature,AppChecker
362,Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition'),AppChecker
369,Divide By Zero,AppChecker
375,Returning a Mutable Object to an Untrusted Caller,AppChecker
388,Error Handling,AppChecker
390,Detection of Error Condition Without Action,AppChecker
391,Unchecked Error Condition,AppChecker
395,Use of NullPointerException Catch to Detect NULL Pointer Dereference,AppChecker
397,Declaration of Throws for Generic Exception,AppChecker
398,Indicator of Poor Code Quality,AppChecker
401,Improper Release of Memory Before Removing Last Reference ('Memory Leak'),AppChecker
404,Improper Resource Shutdown or Release,AppChecker
415,Double Free,AppChecker
428,Unquoted Search Path or Element,AppChecker
467,Use of sizeof() on a Pointer Type,AppChecker
468,Incorrect Pointer Scaling,AppChecker
476,NULL Pointer Dereference,AppChecker
477,Use of Obsolete Functions,AppChecker
478,Missing Default Case in Switch Statement,AppChecker
480,Use of Incorrect Operator,AppChecker
481,Assigning instead of Comparing,AppChecker
482,Comparing instead of Assigning,AppChecker
484,Omitted Break Statement in Switch,AppChecker
486,Comparison of Classes by Name,AppChecker
491,Public cloneable() Method Without Final ('Object Hijack'),AppChecker
497,Exposure of System Data to an Unauthorized Control Sphere,AppChecker
500,Public Static Field Not Marked Final,AppChecker
506,Embedded Malicious Code,AppChecker
511,Logic/Time Bomb,AppChecker
526,Information Exposure Through Environmental Variables,AppChecker
545,Use of Dynamic Class Loading,AppChecker
557,Concurrency Issues,AppChecker
561,Dead Code,AppChecker
562,Return of Stack Variable Address,AppChecker
568,finalize() Method Without super.finalize(),AppChecker
569,Expression Issues,AppChecker
570,Expression is Always False,AppChecker
571,Expression is Always True,AppChecker
580,clone() method does not call super.clone(),AppChecker
581,Object Model Violation: Just One of Equals and Hashcode Defined,AppChecker
582,"Array Declared Public, Final, and Static",AppChecker
583,finalize() Method Declared Public,AppChecker
584,Return Inside Finally Block,AppChecker
585,Empty Synchronized Block,AppChecker
586,Explicit Call to Finalize(),AppChecker
587,Assignment of a Fixed Address to a Pointer,AppChecker
590,Free of Memory not on the Heap,AppChecker
606,Unchecked Input for Loop Condition,AppChecker
609,Double-Checked Locking,AppChecker
617,Reachable Assertion,AppChecker
628,Function Call with Incorrectly Specified Arguments,AppChecker
648,Incorrect Use of Privileged APIs,AppChecker
662,Improper Synchronization,AppChecker
674,Uncontrolled Recursion,AppChecker
682,Incorrect Calculation,AppChecker
683,Function Call With Incorrect Order of Arguments,AppChecker
691,Insufficient Control Flow Management,AppChecker
697,Insufficient Comparison,AppChecker
730,OWASP Top Ten 2004 Category A9 - Denial of Service,AppChecker
759,Use of a One-Way Hash without a Salt,AppChecker
770,Allocation of Resources Without Limits or Throttling,AppChecker
780,Use of RSA Algorithm without OAEP,AppChecker
798,Use of Hard-coded Credentials,AppChecker
806,Buffer Access Using Size of Source Buffer,AppChecker
835,Loop with Unreachable Exit Condition ('Infinite Loop'),AppChecker
858,CERT Java Secure Coding Section 13 - Serialization (SER),AppChecker
961,SFP Secondary Cluster: Incorrect Exception Behavior,AppChecker
0,Sink Point,clang-analyzer
0,Analyzer Statistics,clang-analyzer
788,Out-of-bound array access,clang-analyzer
788,Out-of-bound access,clang-analyzer
557,Call to blocking function in critical section,clang-analyzer
681,Assignment of a non-Boolean value,clang-analyzer
1006,API,clang-analyzer
788,Out-of-bound array access,clang-analyzer
476,Null pointer argument in call to byte string function,clang-analyzer
398,Anti-pattern in the argument,clang-analyzer
398,Anti-pattern in the argument,clang-analyzer
465,Receiver in message expression is 'nil',clang-analyzer
824,Subscript access on an uninitialized object pointer,clang-analyzer
824,Property access on an uninitialized object pointer,clang-analyzer
824,Receiver in message expression is an uninitialized value,clang-analyzer
476,Called C++ object pointer is null,clang-analyzer
824,Called C++ object pointer is uninitialized,clang-analyzer
824,Uninitialized argument value,clang-analyzer
476,Called function pointer is null (null dereference),clang-analyzer
824,Called function pointer is an uninitialized pointer value,clang-analyzer
704,Cast region with wrong size.,clang-analyzer
704,Widening cast to struct type,clang-analyzer
704,Cast from non-struct type to struct type,clang-analyzer
399,Mistaken dealloc,clang-analyzer
401,Missing ivar release (leak),clang-analyzer
389,Incompatible instance method return type,clang-analyzer
242,Potential insecure implementation-specific behavior in call 'vfork',clang-analyzer
338,'random' is not a secure random number generator,clang-analyzer
120,Potential insecure memory buffer bounds restriction in call 'strcat',clang-analyzer
120,Potential insecure memory buffer bounds restriction in call 'strcpy',clang-analyzer
378,Insecure temporary file creation,clang-analyzer
378,Potential insecure temporary file in call 'mktemp',clang-analyzer
242,Potential buffer overflow in call to 'getpw',clang-analyzer
242,Potential buffer overflow in call to 'gets',clang-analyzer
477,Use of deprecated function in call to 'bzero()',clang-analyzer
477,Use of deprecated function in call to 'bcopy()',clang-analyzer
477,Use of deprecated function in call to 'bcmp()',clang-analyzer
467,Potential unintended use of sizeof() on pointer type,clang-analyzer
243,Break out of jail,clang-analyzer
1041,Suspicious code clone,clang-analyzer
1041,Exact code clone,clang-analyzer
681,Conversion,clang-analyzer
1079,Destruction of a polymorphic object with no virtual destructor,clang-analyzer
824,Dereference of undefined pointer value,clang-analyzer
476,Dereference of null pointer,clang-analyzer
1006,Property access,clang-analyzer
136,Dynamic and static type mismatch,clang-analyzer
704,Generics,clang-analyzer
704,Enum cast out of range,clang-analyzer
0,Checking analyzer assumptions,clang-analyzer
587,Use fixed address,clang-analyzer
398,GCD performance anti-pattern,clang-analyzer
502,Use of Untrusted Data,clang-analyzer
569,Identical expressions in conditional expression,clang-analyzer
569,Compare of identical expressions,clang-analyzer
1041,Identical branches,clang-analyzer
1041,Identical conditions,clang-analyzer
1041,Identical conditions,clang-analyzer
1041,Use of identical expressions,clang-analyzer
825,Iterator invalidated,clang-analyzer
465,Iterator out of range,clang-analyzer
459,Incomplete invalidation,clang-analyzer
459,Incomplete invalidation,clang-analyzer
399,AST node allocates heap memory,clang-analyzer
398,Plural Misuse,clang-analyzer
398,Context Missing,clang-analyzer
398,Unlocalizable string,clang-analyzer
399,Improper use of SecKeychain API,clang-analyzer
1006,Improper use of 'dispatch_once',clang-analyzer
401,Memory leak,clang-analyzer
763,Bad free,clang-analyzer
399,Use of zero allocated,clang-analyzer
415,Double delete,clang-analyzer
415,Double free,clang-analyzer
416,Use-after-free,clang-analyzer
761,Offset free,clang-analyzer
763,Bad deallocator,clang-analyzer
590,Free alloca(),clang-analyzer
763,Bad free,clang-analyzer
789,malloc() size overflow,clang-analyzer
131, dubious allocs arguments involving sizeof,clang-analyzer
200,"W^X check fails, Write Exec prot flags set",clang-analyzer
399,Use-after-move,clang-analyzer
1006,Use -drain instead of -release,clang-analyzer
476,CFErrorRef* null dereference,clang-analyzer
1006,Bad return type when passing CFErrorRef*,clang-analyzer
1006,Bad return type when passing NSError**,clang-analyzer
476,Dereference of null pointer,clang-analyzer
476,Argument with 'nonnull' attribute passed null,clang-analyzer
476,Nullability,clang-analyzer
682,Suspicious number object conversion,clang-analyzer
704,OSObject C-Style Cast,clang-analyzer
662,Nil value used as mutex for @synchronized() (no synchronization will occur),clang-analyzer
662,Uninitialized value used as mutex for @synchronized,clang-analyzer
465,CFArray API,clang-analyzer
1006,Objective-C property misuse,clang-analyzer
399,[super dealloc] should not be called more than once,clang-analyzer
1164,Unused instance variable,clang-analyzer
188,Dangerous pointer arithmetic,clang-analyzer
465,Iteration of pointer-like elements,clang-analyzer
465,Sorting of pointer-like elements,clang-analyzer
469,Pointer subtraction,clang-analyzer
667,Use destroyed lock,clang-analyzer
667,Init invalid lock,clang-analyzer
667,Destroy invalid lock,clang-analyzer
667,Lock order reversal,clang-analyzer
667,Double unlocking,clang-analyzer
667,Double locking,clang-analyzer
466,Return of pointer value outside of expected range,clang-analyzer
465,Returning null reference,clang-analyzer
465,Garbage return value,clang-analyzer
399,Memory leak inside autorelease pool,clang-analyzer
910,Double fclose,clang-analyzer
775,Resource Leak,clang-analyzer
910,Double fclose,clang-analyzer
476,NULL stream pointer,clang-analyzer
628,Illegal whence argument,clang-analyzer
19,Tainted data,clang-analyzer
369,Division by zero,clang-analyzer
465,Branch condition evaluates to a garbage value,clang-analyzer
824,uninitialized variable captured by block,clang-analyzer
465,Result of operation is garbage or undefined,clang-analyzer
824,Array subscript is undefined,clang-analyzer
561,Unreachable code,clang-analyzer
789,Dangerous variable-length array (VLA) declaration,clang-analyzer
401,Leaked va_list,clang-analyzer
824,Uninitialized va_list,clang-analyzer
399,Dangerous construct in a vforked process,clang-analyzer
788,Out-of-bound array access,clang-analyzer
788,Out-of-bound access,clang-analyzer
557,Call to blocking function in critical section,clang-analyzer
681,Assignment of a non-Boolean value,clang-analyzer
1006,API,clang-analyzer
788,Out-of-bound array access,clang-analyzer
398,Anti-pattern in the argument,clang-analyzer
398,Anti-pattern in the argument,clang-analyzer
465,Receiver in message expression is 'nil',clang-analyzer
824,Subscript access on an uninitialized object pointer,clang-analyzer
824,Property access on an uninitialized object pointer,clang-analyzer
824,Receiver in message expression is an uninitialized value,clang-analyzer
476,Called C++ object pointer is null,clang-analyzer
824,Called C++ object pointer is uninitialized,clang-analyzer
824,Uninitialized argument value,clang-analyzer
476,Called function pointer is null (null dereference),clang-analyzer
824,Called function pointer is an uninitialized pointer value,clang-analyzer
704,Cast region with wrong size.,clang-analyzer
704,Widening cast to struct type,clang-analyzer
704,Cast from non-struct type to struct type,clang-analyzer
399,Mistaken dealloc,clang-analyzer
401,Missing ivar release (leak),clang-analyzer
389,Incompatible instance method return type,clang-analyzer
242,Potential insecure implementation-specific behavior in call 'vfork',clang-analyzer
338,'random' is not a secure random number generator,clang-analyzer
120,Potential insecure memory buffer bounds restriction in call 'strcat',clang-analyzer
120,Potential insecure memory buffer bounds restriction in call 'strcpy',clang-analyzer
378,Insecure temporary file creation,clang-analyzer
378,Potential insecure temporary file in call 'mktemp',clang-analyzer
242,Potential buffer overflow in call to 'getpw',clang-analyzer
242,Potential buffer overflow in call to 'gets',clang-analyzer
477,Use of deprecated function in call to 'bzero()',clang-analyzer
477,Use of deprecated function in call to 'bcopy()',clang-analyzer
477,Use of deprecated function in call to 'bcmp()',clang-analyzer
467,Potential unintended use of sizeof() on pointer type,clang-analyzer
243,Break out of jail,clang-analyzer
1041,Suspicious code clone,clang-analyzer
1041,Exact code clone,clang-analyzer
681,Conversion,clang-analyzer
1079,Destruction of a polymorphic object with no virtual destructor,clang-analyzer
824,Dereference of undefined pointer value,clang-analyzer
476,Dereference of null pointer,clang-analyzer
1006,Property access,clang-analyzer
369,Division by zero,clang-analyzer
136,Dynamic and static type mismatch,clang-analyzer
704,Generics,clang-analyzer
704,Enum cast out of range,clang-analyzer
587,Use fixed address,clang-analyzer
398,GCD performance anti-pattern,clang-analyzer
502,Use of Untrusted Data,clang-analyzer
569,Identical expressions in conditional expression,clang-analyzer
569,Compare of identical expressions,clang-analyzer
1041,Identical branches,clang-analyzer
1041,Identical conditions,clang-analyzer
1041,Identical conditions,clang-analyzer
1041,Use of identical expressions,clang-analyzer
825,Iterator invalidated,clang-analyzer
465,Iterator out of range,clang-analyzer
459,Incomplete invalidation,clang-analyzer
459,Incomplete invalidation,clang-analyzer
459,Incomplete invalidation,clang-analyzer
399,AST node allocates heap memory,clang-analyzer
398,Plural Misuse,clang-analyzer
398,Context Missing,clang-analyzer
398,Unlocalizable string,clang-analyzer
399,Improper use of SecKeychain API,clang-analyzer
1006,Improper use of 'dispatch_once',clang-analyzer
401,Memory leak,clang-analyzer
763,Bad free,clang-analyzer
399,Use of zero allocated,clang-analyzer
415,Double delete,clang-analyzer
415,Double free,clang-analyzer
416,Use-after-free,clang-analyzer
761,Offset free,clang-analyzer
763,Bad deallocator,clang-analyzer
590,Free alloca(),clang-analyzer
763,Bad free,clang-analyzer
789,malloc() size overflow,clang-analyzer
131,Allocator sizeof operand mismatch,clang-analyzer
399,Use-after-move,clang-analyzer
1006,Use -drain instead of -release,clang-analyzer
476,CFErrorRef* null dereference,clang-analyzer
1006,Bad return type when passing CFErrorRef*,clang-analyzer
1006,Bad return type when passing NSError**,clang-analyzer
476,Dereference of null pointer,clang-analyzer
476,Argument with 'nonnull' attribute passed null,clang-analyzer
476,Nullability,clang-analyzer
682,Suspicious number object conversion,clang-analyzer
704,OSObject C-Style Cast,clang-analyzer
662,Nil value used as mutex for @synchronized() (no synchronization will occur),clang-analyzer
662,Uninitialized value used as mutex for @synchronized,clang-analyzer
465,CFArray API,clang-analyzer
1006,Objective-C property misuse,clang-analyzer
399,[super dealloc] should not be called more than once,clang-analyzer
1164,Unused instance variable,clang-analyzer
188,Dangerous pointer arithmetic,clang-analyzer
188,Dangerous pointer arithmetic,clang-analyzer
465,Iteration of pointer-like elements,clang-analyzer
465,Sorting of pointer-like elements,clang-analyzer
469,Pointer subtraction,clang-analyzer
667,Use destroyed lock,clang-analyzer
667,Init invalid lock,clang-analyzer
667,Destroy invalid lock,clang-analyzer
667,Lock order reversal,clang-analyzer
667,Double unlocking,clang-analyzer
667,Double locking,clang-analyzer
466,Return of pointer value outside of expected range,clang-analyzer
465,Returning null reference,clang-analyzer
465,Garbage return value,clang-analyzer
399,Memory leak inside autorelease pool,clang-analyzer
910,Double fclose,clang-analyzer
775,Resource Leak,clang-analyzer
910,Double fclose,clang-analyzer
628,Illegal whence argument,clang-analyzer
476,NULL stream pointer,clang-analyzer
19,Tainted data,clang-analyzer
369,Division by zero,clang-analyzer
465,Branch condition evaluates to a garbage value,clang-analyzer
824,uninitialized variable captured by block,clang-analyzer
465,Result of operation is garbage or undefined,clang-analyzer
824,Array subscript is undefined,clang-analyzer
561,Unreachable code,clang-analyzer
789,Dangerous variable-length array (VLA) declaration,clang-analyzer
401,Leaked va_list,clang-analyzer
824,Uninitialized va_list,clang-analyzer
399,Dangerous construct in a vforked process,clang-analyzer
0,ALLOCATION_COMPLEXITY_INCREASE,Infer
0,ALLOCATION_COMPLEXITY_INCREASE_COLD_START,Infer
0,ANALYSIS_STOPS,Infer
0,ARRAY_OUT_OF_BOUNDS_L1,Infer
0,ARRAY_OUT_OF_BOUNDS_L2,Infer
0,ARRAY_OUT_OF_BOUNDS_L3,Infer
0,Abduction_case_not_implemented,Infer
0,Array_of_pointsto,Infer
0,Assert_failure,Infer
121,BUFFER_OVERRUN_L1,Infer
121,BUFFER_OVERRUN_L2,Infer
121,BUFFER_OVERRUN_L3,Infer
121,BUFFER_OVERRUN_L4,Infer
121,BUFFER_OVERRUN_L5,Infer
121,BUFFER_OVERRUN_R2,Infer
121,BUFFER_OVERRUN_S2,Infer
121,BUFFER_OVERRUN_U5,Infer
0,Bad_footprint,Infer
0,CHECKERS_ALLOCATES_MEMORY,Infer
0,CHECKERS_ANNOTATION_REACHABILITY_ERROR,Infer
0,CHECKERS_CALLS_EXPENSIVE_METHOD,Infer
0,CHECKERS_EXPENSIVE_OVERRIDES_UNANNOTATED,Infer
0,CHECKERS_FRAGMENT_RETAINS_VIEW,Infer
704,CHECKERS_IMMUTABLE_CAST,Infer
628,CHECKERS_PRINTF_ARGS,Infer
704,CLASS_CAST_EXCEPTION,Infer
0,CLASS_LOAD,Infer
1077,COMPARING_FLOAT_FOR_EQUALITY,Infer
0,COMPONENT_FACTORY_FUNCTION,Infer
0,COMPONENT_FILE_CYCLOMATIC_COMPLEXITY,Infer
0,COMPONENT_FILE_LINE_COUNT,Infer
0,COMPONENT_INITIALIZER_WITH_SIDE_EFFECTS,Infer
0,COMPONENT_WITH_MULTIPLE_FACTORY_METHODS,Infer
0,COMPONENT_WITH_UNCONVENTIONAL_SUPERCLASS,Infer
570,CONDITION_ALWAYS_FALSE,Infer
571,CONDITION_ALWAYS_TRUE,Infer
0,CREATE_INTENT_FROM_URI,Infer
79,CROSS_SITE_SCRIPTING,Infer
0,Cannot_star,Infer
0,Codequery,Infer
825,DANGLING_POINTER_DEREFERENCE,Infer
833,DEADLOCK,Infer
563,DEAD_STORE,Infer
590,DEALLOCATE_STACK_VARIABLE,Infer
590,DEALLOCATE_STATIC_MEMORY,Infer
0,DEALLOCATION_MISMATCH,Infer
369,DIVIDE_BY_ZERO,Infer
0,DO_NOT_REPORT,Infer
0,EMPTY_VECTOR_ACCESS,Infer
1041,ERADICATE_CONDITION_REDUNDANT,Infer
0,ERADICATE_CONDITION_REDUNDANT_NONNULL,Infer
456,ERADICATE_FIELD_NOT_INITIALIZED,Infer
0,ERADICATE_FIELD_NOT_MUTABLE,Infer
0,ERADICATE_FIELD_NOT_NULLABLE,Infer
0,ERADICATE_FIELD_OVER_ANNOTATED,Infer
0,ERADICATE_FIELD_VALUE_ABSENT,Infer
0,ERADICATE_INCONSISTENT_SUBCLASS_PARAMETER_ANNOTATION,Infer
0,ERADICATE_INCONSISTENT_SUBCLASS_RETURN_ANNOTATION,Infer
0,ERADICATE_NULLABLE_DEREFERENCE,Infer
0,ERADICATE_PARAMETER_NOT_NULLABLE,Infer
0,ERADICATE_PARAMETER_VALUE_ABSENT,Infer
0,ERADICATE_RETURN_NOT_NULLABLE,Infer
0,ERADICATE_RETURN_OVER_ANNOTATED,Infer
0,ERADICATE_RETURN_VALUE_NOT_PRESENT,Infer
0,ERADICATE_VALUE_NOT_PRESENT,Infer
0,EXECUTION_TIME_COMPLEXITY_INCREASE,Infer
0,EXECUTION_TIME_COMPLEXITY_INCREASE_COLD_START,Infer
0,EXPENSIVE_ALLOCATION,Infer
0,EXPENSIVE_ALLOCATION_COLD_START,Infer
0,EXPENSIVE_EXECUTION_TIME,Infer
0,EXPENSIVE_EXECUTION_TIME_COLD_START,Infer
0,EXPENSIVE_LOOP_INVARIANT_CALL,Infer
0,EXPOSED_INSECURE_INTENT_HANDLING,Infer
0,Failure_exe,Infer
0,GLOBAL_VARIABLE_INITIALIZED_WITH_FUNCTION_OR_METHOD_CALL,Infer
0,GRAPHQL_FIELD_ACCESS,Infer
0,GUARDEDBY_VIOLATION,Infer
0,INEFFICIENT_KEYSET_ITERATOR,Infer
789,INFERBO_ALLOC_IS_BIG,Infer
789,INFERBO_ALLOC_IS_NEGATIVE,Infer
789,INFERBO_ALLOC_IS_ZERO,Infer
789,INFERBO_ALLOC_MAY_BE_BIG,Infer
789,INFERBO_ALLOC_MAY_BE_NEGATIVE,Infer
789,INFINITE_ALLOCATION,Infer
0,INFINITE_EXECUTION_TIME,Infer
0,INHERENTLY_DANGEROUS_FUNCTION,Infer
0,INSECURE_INTENT_HANDLING,Infer
190,INTEGER_OVERFLOW_L1,Infer
190,INTEGER_OVERFLOW_L2,Infer
190,INTEGER_OVERFLOW_L5,Infer
190,INTEGER_OVERFLOW_R2,Infer
190,INTEGER_OVERFLOW_U5,Infer
0,INTERFACE_NOT_THREAD_SAFE,Infer
0,INVARIANT_CALL,Infer
0,IVAR_NOT_NULL_CHECKED,Infer
0,Internal_error,Infer
0,JAVASCRIPT_INJECTION,Infer
0,LOCK_CONSISTENCY_VIOLATION,Infer
0,LOGGING_PRIVATE_DATA,Infer
0,Leak_after_array_abstraction,Infer
0,Leak_in_footprint,Infer
401,MEMORY_LEAK,Infer
0,MISSING_REQUIRED_PROP,Infer
0,MUTABLE_LOCAL_VARIABLE_IN_COMPONENT_FILE,Infer
0,Missing_fld,Infer
0,NULLSAFE_FIELD_NOT_NULLABLE,Infer
0,NULLSAFE_NULLABLE_DEREFERENCE,Infer
476,NULL_DEREFERENCE,Infer
0,NULL_TEST_AFTER_DEREFERENCE,Infer
0,PARAMETER_NOT_NULL_CHECKED,Infer
0,POINTER_SIZE_MISMATCH,Infer
0,PRECONDITION_NOT_FOUND,Infer
0,PRECONDITION_NOT_MET,Infer
0,PREMATURE_NIL_TERMINATION_ARGUMENT,Infer
0,PURE_FUNCTION,Infer
0,QUANDARY_TAINT_ERROR,Infer
0,REGISTERED_OBSERVER_BEING_DEALLOCATED,Infer
402,RESOURCE_LEAK,Infer
0,RETAIN_CYCLE,Infer
0,RETURN_EXPRESSION_REQUIRED,Infer
0,RETURN_STATEMENT_MISSING,Infer
252,RETURN_VALUE_IGNORED,Infer
78,SHELL_INJECTION,Infer
78,SHELL_INJECTION_RISK,Infer
0,SKIP_FUNCTION,Infer
0,SKIP_POINTER_DEREFERENCE,Infer
89,SQL_INJECTION,Infer
89,SQL_INJECTION_RISK,Infer
562,STACK_VARIABLE_ADDRESS_ESCAPE,Infer
0,STARVATION,Infer
0,STATIC_INITIALIZATION_ORDER_FIASCO,Infer
0,STRICT_MODE_VIOLATION,Infer
0,Symexec_memory_error,Infer
0,TAINTED_BUFFER_ACCESS,Infer
789,TAINTED_MEMORY_ALLOCATION,Infer
362,THREAD_SAFETY_VIOLATION,Infer
0,TOPL_ERROR,Infer
0,UNARY_MINUS_APPLIED_TO_UNSIGNED_EXPRESSION,Infer
457,UNINITIALIZED_VALUE,Infer
561,UNREACHABLE_CODE,Infer
0,UNSAFE_GUARDED_BY_ACCESS,Infer
0,UNTRUSTED_BUFFER_ACCESS,Infer
502,UNTRUSTED_DESERIALIZATION,Infer
0,UNTRUSTED_DESERIALIZATION_RISK,Infer
0,UNTRUSTED_ENVIRONMENT_CHANGE_RISK,Infer
0,UNTRUSTED_FILE,Infer
0,UNTRUSTED_FILE_RISK,Infer
789,UNTRUSTED_HEAP_ALLOCATION,Infer
0,UNTRUSTED_INTENT_CREATION,Infer
0,UNTRUSTED_URL_RISK,Infer
0,UNTRUSTED_VARIABLE_LENGTH_ARRAY,Infer
0,USER_CONTROLLED_SQL_RISK,Infer
416,USE_AFTER_DELETE,Infer
416,USE_AFTER_FREE,Infer
666,USE_AFTER_LIFETIME,Infer
0,Unknown_proc,Infer
0,VECTOR_INVALIDATION,Infer
685,Wrong_argument_number,Infer
0,ZERO_ALLOCATION,Infer
0,ZERO_EXECUTION_TIME,Infer
571,There are identical sub-expressions to the left and to the right of the 'foo' operator.,PVS-Studio
783,Perhaps the '?:' operator works in a different way than it was expected. The '?:' operator has a lower priority than the 'foo' operator.,PVS-Studio
697,This is a nonsensical comparison: pointer < 0.,PVS-Studio
841,It is highly probable that the semicolon ';' is missing after 'return' keyword.,PVS-Studio
770,The 'alloca' function is used inside the loop. This can quickly overflow stack.,PVS-Studio
562,Pointer to local variable 'X' is stored outside the scope of this variable. Such a pointer will become invalid.,PVS-Studio
562,Pointer to local array 'X' is stored outside the scope of this array. Such a pointer will become invalid.,PVS-Studio
480,The use of 'new type(n)' pattern was detected. Probably meant: 'new type[n]'.,PVS-Studio
703,Exceptions that were raised inside noexcept functions must be wrapped in a try..catch block.,PVS-Studio
686,The 'Foo' function is not expected to receive class-type variable as 'N' actual argument.,PVS-Studio
467,"The sizeof() operator returns size of the pointer, and not of the array, in given expression.",PVS-Studio
119,A call of the 'Foo' function will lead to a buffer overflow or underflow.,PVS-Studio
676,Use _beginthreadex/_endthreadex functions instead of CreateThread/ExitThread functions.,PVS-Studio
131,Dividing sizeof a pointer by another value. There is a probability of logical error presence.,PVS-Studio
763,The 'delete' operator is applied to non-pointer.,PVS-Studio
571,Consider inspecting an odd expression. Non-null function pointer is compared to null.,PVS-Studio
570,The use of 'if (A) {...} else if (A) {...}' pattern was detected. There is a probability of logical error presence.,PVS-Studio
131,The 'malloc' function allocates strange amount of memory calculated by 'strlen(expr)'. Perhaps the correct variant is strlen(expr) + 1.,PVS-Studio
563,The 'x' variable is assigned values twice successively. Perhaps this is a mistake.,PVS-Studio
480,"The comma operator ',' in array index expression.",PVS-Studio
480,"Such expressions using the ',' operator are dangerous. Make sure the expression is correct.",PVS-Studio
690,Dereferencing of the null pointer might take place.,PVS-Studio
691,The 'then' statement is equivalent to the 'else' statement.,PVS-Studio
682,"The code contains the collection of similar blocks. Check items X, Y, Z, ... in lines N1, N2, N3, ...",PVS-Studio
253,The 'strcmp' function returns 0 if corresponding strings are equal. Consider examining the condition for mistakes.,PVS-Studio
351,It is odd that the 'zero' value is assigned to pointer. Probably meant: *ptr = zero.,PVS-Studio
697,It is odd that pointer is compared with the 'zero' value. Probably meant: *ptr != zero.,PVS-Studio
670,Odd semicolon ';' after 'if/for/while' operator.,PVS-Studio
252,The return value of function 'Foo' is required to be utilized.,PVS-Studio
131,It is odd that a sizeof() operator is multiplied by sizeof().,PVS-Studio
480,Consider inspecting the statement of '*pointer++' pattern. Probably meant: '(*pointer)++'.,PVS-Studio
691,It is likely that a wrong variable is being incremented inside the 'for' operator. Consider reviewing 'X'.,PVS-Studio
691,It is likely that a wrong variable is being compared inside the 'for' operator. Consider reviewing 'X'.,PVS-Studio
691,The variable 'X' is being used for this loop and for the outer loop.,PVS-Studio
682,Be advised that the utilized constant value is represented by an octal form.,PVS-Studio
682,Consider reviewing the correctness of 'X' item's usage.,PVS-Studio
688,Consider inspecting iterators which are being passed as arguments to function 'Foo'.,PVS-Studio
628,Member 'x' should point to string terminated by two 0 characters.,PVS-Studio
628,It is dangerous to print a string into itself.,PVS-Studio
704,Consider inspecting an odd type cast: 'Type1' to ' Type2'.,PVS-Studio
704,It is odd that value 'X' is assigned to the variable 'Y' of HRESULT type.,PVS-Studio
253,It is odd that the value 'X' of HRESULT type is compared with 'Y'.,PVS-Studio
253,Such conditional expression of 'if' statement is incorrect for the HRESULT type value 'Foo'. The SUCCEEDED or FAILED macro should be used instead.,PVS-Studio
665,Member of a class is initialized with itself: 'Foo(Foo)'.,PVS-Studio
571,Expression is always true/false.,PVS-Studio
704,Consider reviewing type casting. TYPE X[][] is not equivalent to TYPE **X.,PVS-Studio
688,The 'first' argument of 'Foo' function is equal to the 'second' argument.,PVS-Studio
682,An odd precise comparison. It's probably better to use a comparison with defined precision: fabs(A - B) < Epsilon or fabs(A - B) > Epsilon.,PVS-Studio
561,The code under this 'case' label is unreachable.,PVS-Studio
480,A bool type variable is being incremented. Perhaps another variable should be incremented instead.,PVS-Studio
762,Incorrect use of smart pointer.,PVS-Studio
191,The expression of the 'A - B > 0' kind will work as 'A != B'.,PVS-Studio
697,The values of different enum types are compared.,PVS-Studio
787,Array overrun is possible.,PVS-Studio
562,Function returns the pointer/reference to temporary local object.,PVS-Studio
481,Suspicious assignment inside the conditional expression of 'if/while/for' statement.,PVS-Studio
571,A part of conditional expression is always true/false.,PVS-Studio
563,It's probably better to assign value to 'foo' variable than to declare it anew.,PVS-Studio
563,It's odd to compare a bool type value with a value of N.,PVS-Studio
670,It is possible that this 'else' branch must apply to the previous 'if' statement.,PVS-Studio
480,The '&' or '|' operator is applied to bool type value. You've probably forgotten to include parentheses or intended to use the '&&' or '||' operator.,PVS-Studio
544,An empty exception handler. Silent suppression of exceptions can hide the presence of bugs in source code during testing.,PVS-Studio
587,The integer constant is converted to pointer. Possibly an error or a bad coding style.,PVS-Studio
758,The modification of a variable is unsequenced relative to another operation on the same variable. This may lead to undefined behavior.,PVS-Studio
131,It's odd that the argument of sizeof() operator is the expression.,PVS-Studio
197,Truncation of constant value.,PVS-Studio
480,The variable is assigned to itself.,PVS-Studio
571,Recurring check. This condition was already verified in previous line.,PVS-Studio
665,It is odd that the object which was created using 'new' operator is immediately cast to another type.,PVS-Studio
457,Uninitialized variable 'Foo' was used. The variable was used to initialize itself.,PVS-Studio
823,The pointer is used simultaneously as an array and as a pointer to single object.,PVS-Studio
628,Function receives an odd argument.,PVS-Studio
686,Incorrect format. Consider checking the N actual argument of the 'Foo' function.,PVS-Studio
478,Label is present inside a switch(). It is possible that these are misprints and 'default:' operator should be used instead.,PVS-Studio
480,An odd bitwise operation detected. Consider verifying it.,PVS-Studio
467,The 'Foo' function receives the pointer and its size as arguments. It is possibly a mistake. Inspect the N argument.,PVS-Studio
843,An odd explicit type casting. Consider verifying it.,PVS-Studio
670,The conditional expressions of the 'if' statements situated alongside each other are identical.,PVS-Studio
787,Consider reviewing the source code which operates the container.,PVS-Studio
783,"The '?:' operator, regardless of its conditional expression, always returns one and the same value.",PVS-Studio
480,The same value is present on both sides of the operator. The expression is incorrect or it can be simplified.,PVS-Studio
762,An attempt to release the memory in which the 'Foo' local variable is stored.,PVS-Studio
415,The 'Foo' function is called twice for deallocation of the same resource.,PVS-Studio
480,"The expression of the 'A =+ B' kind is utilized. Consider reviewing it, as it is possible that 'A += B' was meant.",PVS-Studio
480,"The expression of the 'A =- B' kind is utilized. Consider reviewing it, as it is possible that 'A -= B' was meant.",PVS-Studio
571,Consider inspecting this expression. The expression is excessive or contains a misprint.,PVS-Studio
393,Non-void function should return a value.,PVS-Studio
783,Consider reviewing the expression of the 'A = B == C' kind. The expression is calculated as following: 'A = (B == C)'.,PVS-Studio
823,The pointer steps out of array's bounds.,PVS-Studio
476,"The pointer was utilized before it was verified against nullptr. Check lines: N1, N2.",PVS-Studio
390,The object was created but it is not being used. The 'throw' keyword could be missing.,PVS-Studio
14,"The compiler could delete the 'memset' function call, which is used to flush 'Foo' buffer. The RtlSecureZeroMemory() function should be used to erase the private data.",PVS-Studio
665,The 'memset/memcpy' function is used to nullify/copy the fields of 'Foo' class. Virtual table pointer will be damaged by this.,PVS-Studio
1079,"The virtual destructor is not present, although the 'Foo' class contains virtual functions.",PVS-Studio
571,Consider inspecting the condition. The 'Foo' pointer is always not equal to NULL.,PVS-Studio
704,An odd implicit type casting.,PVS-Studio
480,Consider inspecting this expression. '<' possibly should be replaced with '<<'.,PVS-Studio
665,"The object was created but it is not being used. If you wish to call constructor, 'this->Foo::Foo(....)' should be used.",PVS-Studio
682,It is odd that the number of iterations in the loop equals to the size of the pointer.,PVS-Studio
682,Consider verifying the expression. An unsigned value is compared to the number - NN.,PVS-Studio
482,Ownerless expression 'Foo'.,PVS-Studio
704,Recurring sequence of explicit type casts.,PVS-Studio
369,Divide or mod by zero.,PVS-Studio
758,Undefined behavior. Check the shift operator.,PVS-Studio
590,The memory allocation and deallocation methods are incompatible.,PVS-Studio
670,An unconditional 'break/continue/return/goto' within a loop.,PVS-Studio
761,Strange pointer arithmetic with 'malloc/new'.,PVS-Studio
824,Uninitialized variable 'Foo' used.,PVS-Studio
704,An odd explicit conversion from 'float *' type to 'double *' type.,PVS-Studio
480,The 'Foo' named constant with the value of 0 is used in the bitwise operation.,PVS-Studio
480,Consider inspecting the condition. An argument of the '|' bitwise operation always contains a non-zero value.,PVS-Studio
134,"It's dangerous to call the 'Foo' function in such a manner, as the line being passed could contain format specification. The example of the safe code: printf(""%s"", str);",PVS-Studio
480,An array is being utilized as a pointer to single object.,PVS-Studio
682,It's unusual that the expression of sizeof(T)*N kind is being summed with the pointer to T type.,PVS-Studio
835,Consider inspecting the 'for' operator. It's possible that the loop will be executed incorrectly or won't be executed at all.,PVS-Studio
478,Consider inspecting the 'switch' statement. It's possible that the first 'case' operator is missing.,PVS-Studio
416,Consider inspecting the '?:' operator. A temporary object is being created and subsequently destroyed.,PVS-Studio
547,The constant NN is being utilized. The resulting value could be inaccurate. Consider using the M_NN constant from <math.h>.,PVS-Studio
691,Consider inspecting the 'for' operator. Initial and final values of the iterator are the same.,PVS-Studio
483,"Consider checking for misprints. It's possible that ',' should be replaced by ';'.",PVS-Studio
682,Consider inspecting the expression. The argument of sizeof() is the macro which expands to a number.,PVS-Studio
670,"It's possible that the line was commented out improperly, thus altering the program's operation logics.",PVS-Studio
190,Consider inspecting the expression. Bit shifting of the 32-bit value with a subsequent expansion to the 64-bit type.,PVS-Studio
665,The 'malloc' function is used to allocate memory for an array of objects which are classes containing constructors/destructors.,PVS-Studio
30,Consider inspecting the 'Foo' function call. Defining an absolute path to the file or directory is considered a poor style.,PVS-Studio
686,Consider inspecting the NN argument of the 'Foo' function. It is odd that the argument is of the 'T' type.,PVS-Studio
480,Consider inspecting the expression. Probably the '!=' should be used here.,PVS-Studio
783,The priority of the '+' operation is higher than that of the '<<' operation. It's possible that parentheses should be used in the expression.,PVS-Studio
135,Consider inspecting the expression. The length should probably be multiplied by the sizeof(wchar_t).,PVS-Studio
682,The expression was implicitly cast from integer type to real type. Consider utilizing an explicit type cast to avoid overflow or loss of a fractional part.,PVS-Studio
570,Two opposite conditions were encountered. The second condition is always false.,PVS-Studio
665,A terminal null is present inside a string. The '\0xNN' characters were encountered. Probably meant: '\xNN'.,PVS-Studio
685,Consider inspecting the expression for function call. It is possible that one of the closing ')' parentheses was positioned incorrectly.,PVS-Studio
483,The code's operational logic does not correspond with its formatting.,PVS-Studio
704,The buffer size is not a multiple of the element size.,PVS-Studio
197,Saving the function result inside the 'byte' type variable is inappropriate. The significant bits could be lost breaking the program's logic.,PVS-Studio
480,Unusual pointer arithmetic. The value of the 'char' type is being added to the string pointer.,PVS-Studio
664,A suspicious function declaration. It is possible that the T type object was meant to be created.,PVS-Studio
193,"The function call could lead to the buffer overflow. The bounds should not contain the size of the buffer, but a number of characters it can hold.",PVS-Studio
670,Consider inspecting the application's logic. It's possible that 'else' keyword is missing.,PVS-Studio
587,The value of 'A' type is assigned to the pointer of 'B' type.,PVS-Studio
783,Priority of the '&&' operation is higher than that of the '||' operation.,PVS-Studio
561,There are two 'if' statements with identical conditional expressions. The first 'if' statement contains function return. This means that the second 'if' statement is senseless.,PVS-Studio
468,"Type casting operation is utilized 2 times in succession. Next, the '+' operation is executed. Probably meant: (T1)((T2)a + b).",PVS-Studio
682,"An odd operation of the 'sizeof(X)/sizeof(T)' kind is performed, where 'X' is of the 'class' type.",PVS-Studio
480,The operation is executed 3 or more times in succession.,PVS-Studio
665,A suspicious string consisting of two parts is used for the initialization. It is possible that a comma is missing.,PVS-Studio
834,The condition of loop is always true/false.,PVS-Studio
480,The strings were concatenated but are not utilized. Consider inspecting the expression.,PVS-Studio
665,Variables are initialized through the call to the same function. It's probably an error or un-optimized code.,PVS-Studio
393,It's odd that this function always returns one and the same value of NN.,PVS-Studio
190,"A value is being subtracted from the unsigned variable. This can result in an overflow. In such a case, the comparison operation can potentially behave unexpectedly.",PVS-Studio
480,The program contains an unused label and a function call: 'CC:AA()'. It's possible that the following was intended: 'CC::AA()'.,PVS-Studio
758,Consider inspecting the loop expression. Different containers are utilized for setting up initial and final values of the iterator.,PVS-Studio
834,Infinite loop is possible. The 'cin.eof()' condition is insufficient to break from the loop. Consider adding the 'cin.fail()' function call to the conditional expression.,PVS-Studio
476,The pointer is being dereferenced on the initialization list before it is verified against null inside the body of the constructor function.,PVS-Studio
805,Consider inspecting NN argument of the function 'Foo'. It is possible that the value does not correspond with the length of a string which was passed with the YY argument.,PVS-Studio
480,The 'throw' operator does not possess any arguments and is not situated within the 'catch' block.,PVS-Studio
571,"There is no sense in testing the pointer against null, as the memory was allocated using the 'new' operator. The exception will be generated in the case of memory allocation error.",PVS-Studio
457,An uninitialized class member is used to initialize another member. Remember that members are initialized in the order of their declarations inside a class.,PVS-Studio
687,It is possible that the 'swap' function interchanges a variable with itself.,PVS-Studio
190,"More than N bits are required to store the value, but the expression evaluates to the T type which can only hold K bits.",PVS-Studio
682,The expression contains a suspicious mix of integer and real types.,PVS-Studio
253,It is incorrect to compare the variable of BOOL type with TRUE.,PVS-Studio
688,An object is used as an argument to its own method. Consider checking the first actual argument of the 'Foo' function.,PVS-Studio
457,The 'X' variable was not initialized. This variable is passed by a reference to the 'Foo' function in which its value will be utilized.,PVS-Studio
401,"The 'delete A, B' expression only destroys the 'A' object. Then the ',' operator returns a resulting value from the right side of the expression.",PVS-Studio
758,The language standard does not define an order in which the 'Foo' functions will be called during evaluation of arguments.,PVS-Studio
190,Consider inspecting the loop expression. It is possible that the 'i' variable should be incremented instead of the 'n' variable.,PVS-Studio
682,A value of variable is not modified. Consider inspecting the expression. It is possible that '1' should be present instead of '0'.,PVS-Studio
480,Consider inspecting the return statement. The expression contains a comma.,PVS-Studio
571,A pattern was detected: A || (A && ...). The expression is excessive or contains a logical error.,PVS-Studio
682,Size of an array calculated by the sizeof() operator was added to a pointer. It is possible that the number of elements should be calculated by sizeof(A)/sizeof(A[0]).,PVS-Studio
404,The destructor of the 'Foo' class is not declared as a virtual. It is possible that a smart pointer will not destroy an object correctly.,PVS-Studio
788,"An inappropriate attempt to append a null character to a string. To determine the length of a string by 'strlen' function correctly, a string ending with a null terminator should be used in the first place.",PVS-Studio
835,Consider inspecting conditional expression of the loop. It is possible that 'i < X.size()' should be used instead of 'X.size()'.,PVS-Studio
571,The condition (ptr - const_value) is only false if the value of a pointer equals a magic constant.,PVS-Studio
670,Range intersections are possible within conditional expressions.,PVS-Studio
670,The 'continue' operator will terminate 'do { ... } while (FALSE)' loop because the condition is always false.,PVS-Studio
682,A number of elements in the allocated array is equal to size of a pointer in bytes.,PVS-Studio
253,"strcmp()-like functions can return not only the values -1, 0 and 1, but any values.",PVS-Studio
481,Consider inspecting the 'foo = bar = baz ? .... : ....' expression. It is possible that 'foo = bar == baz ? .... : ....' should be used here instead.,PVS-Studio
480,Consider inspecting the 'T foo = foo = x;' expression. It is odd that variable is initialized through itself.,PVS-Studio
401,"realloc() possible leak: when realloc() fails in allocating memory, original pointer is lost. Consider assigning realloc() to a temporary pointer.",PVS-Studio
544,Classes should always be derived from std::exception (and alike) as 'public'.,PVS-Studio
571,The 'this == 0' comparison should be avoided - this comparison is always false on newer compilers.,PVS-Studio
691,"It is possible that 'else' block was forgotten or commented out, thus altering the program's operation logics.",PVS-Studio
682,Suspicious division: sizeof(X) / Value. Size of every element in X array does not equal to divisor.,PVS-Studio
758,"Dangerous construction is used: 'm[x] = m.size()', where 'm' is of 'T' class. This may lead to undefined behavior.",PVS-Studio
682,Suspicious comparison found: 'a == b == c'. Remember that 'a == b == c' is not equal to 'a == b && b == c'.,PVS-Studio
835,Be advised that compiler may delete this cycle or make it infinity. Use volatile variable(s) or synchronization primitives to avoid this.,PVS-Studio
476,The pointer was utilized in the logical expression before it was verified against nullptr in the same logical expression.,PVS-Studio
563,"Variable is not passed into foreach loop by a reference, but its value is changed inside of the loop.",PVS-Studio
691,The 'while' operator has empty body. Suspicious pattern detected.,PVS-Studio
704,Suspicious type conversion: HRESULT -> BOOL (BOOL -> HRESULT).,PVS-Studio
843,It is suspicious to cast object of base class V to derived class U.,PVS-Studio
665,The VARIANT_BOOL type is utilized incorrectly. The true value (VARIANT_TRUE) is defined as -1.,PVS-Studio
697,An abnormality within similar comparisons. It is possible that a typo is present inside the expression.,PVS-Studio
416,"Function returns a pointer to the internal string buffer of a local object, which will be destroyed.",PVS-Studio
197,Converting integers or pointers to BOOL can lead to a loss of high-order bits. Non-zero value can become 'FALSE'.,PVS-Studio
704,"A dangerous cast of 'this' to 'void*' type in the 'Base' class, as it is followed by a subsequent cast to 'Class' type.",PVS-Studio
761,An attempt to free memory containing the 'int A[10]' array by using the 'free(A)' function.,PVS-Studio
783,Return value of 'wcslen' function is not multiplied by 'sizeof(wchar_t)'.,PVS-Studio
570,An excessive check can be simplified. The '||' operator is surrounded by opposite expressions 'x' and '!x'.,PVS-Studio
457,Not all members of a class are initialized inside the constructor.,PVS-Studio
665,The variable of char type is compared with pointer to string.,PVS-Studio
480,Unary minus operator does not modify a bool type value.,PVS-Studio
783,It is possible that macro expansion resulted in incorrect evaluation order.,PVS-Studio
758,The behavior is undefined for arithmetic or comparisons with pointers that do not point to members of the same array.,PVS-Studio
665,"It is possible that ',' comma is missing at the end of the string.",PVS-Studio
672,Temporary anonymous object is used.,PVS-Studio
20,EOF should not be compared with a value of the 'char' type. Consider using the 'int' type.,PVS-Studio
480,"The following pattern is used: throw (a, b);. It is possible that type name was omitted: throw MyException(a, b);.",PVS-Studio
170,Function receives an address of a 'char' type variable instead of pointer to a buffer.,PVS-Studio
475,The memory areas must not overlap. Use 'memmove' function.,PVS-Studio
664,Temporary object is immediately destroyed after being created. Consider naming the object.,PVS-Studio
704,A 'wchar_t *' type string is incorrectly converted to 'BSTR' type string.,PVS-Studio
480,An odd expression inside parenthesis. It is possible that a function name is missing.,PVS-Studio
762,Memory for 'getline' function should be allocated only by 'malloc' or 'realloc' functions. Consider inspecting the first parameter of 'getline' function.,PVS-Studio
675,Destructor of the object will be invoked a second time after leaving the object's scope.,PVS-Studio
788,Creating an object with placement new requires a buffer of large size.,PVS-Studio
682,The '&=' operation always sets a value of 'Foo' variable to zero.,PVS-Studio
123,Copying from unsafe data source. Buffer overflow is possible.,PVS-Studio
690,It is possible that an incorrect variable is compared with null after type conversion using 'dynamic_cast'.,PVS-Studio
416,Reference invalidated because of the destruction of the temporary object returned by the function.,PVS-Studio
703,Violated order of exception handlers. Exception caught by handler for base class.,PVS-Studio
670,Consider inspecting virtual function arguments. See NN argument of function 'Foo' in derived class and base class.,PVS-Studio
683,Possible incorrect order of arguments passed to function.,PVS-Studio
682,A compound assignment expression 'X += X + N' is suspicious. Consider inspecting it for a possible error.,PVS-Studio
462,An item with the same key has already been added.,PVS-Studio
571,The variable is of enum type. It is odd that it is used as a variable of a Boolean-type.,PVS-Studio
119,The pointer in the expression equals nullptr. The resulting value is meaningless and should not be used.,PVS-Studio
480,Possible use of a left shift operator instead of a comparison operator.,PVS-Studio
758,Calling the 'delete' operator for a void pointer will cause undefined behavior.,PVS-Studio
775,The function was exited without releasing the pointer/handle. A memory/resource leak is possible.,PVS-Studio
416,The pointer was used after the memory was released.,PVS-Studio
1023,It is odd that the BSTR data type is compared using a relational operator.,PVS-Studio
835,Potentially infinite loop. The variable in the loop exit condition does not change its value between iterations.,PVS-Studio
468,Dangerous widening type conversion from an array of derived-class objects to a base-class pointer.,PVS-Studio
682,"Two similar code fragments were found. Perhaps, this is a typo and 'X' variable should be used instead of 'Y'.",PVS-Studio
561,Unreachable code detected. It is possible that an error is present.,PVS-Studio
789,"The value of the variable is checked after it was used. Perhaps there is a mistake in program logic. Check lines: N1, N2.",PVS-Studio
469,It is pointless to compute the distance between the elements of different arrays.,PVS-Studio
119,Dereferencing of invalid iterator 'X' might take place.,PVS-Studio
197,The size of the bit mask is less than the size of the first operand. This will cause the loss of the higher bits.,PVS-Studio
691,Constant expression in switch statement.,PVS-Studio
197,"Assigning the value C to the X variable looks suspicious. The value range of the variable: [A, B].",PVS-Studio
457,Review captured variable in lambda expression.,PVS-Studio
672,"Iterators for the container, used in the range-based for loop, become invalid upon a function call.",PVS-Studio
691,The initial value of the index in the nested loop equals 'i'. Consider using 'i + 1' instead.,PVS-Studio
691,The function located to the right of the '|' and '&' operators will be called regardless of the value of the left operand. Consider using '||' and '&&' instead.,PVS-Studio
691,"It is odd that the result of the statement is a part of the condition. Perhaps, this statement should have been compared with something else.",PVS-Studio
484,A 'break' statement is probably missing in a 'switch' statement.,PVS-Studio
253,The function is used as if it returned a bool type. The return value of the function should probably be compared with std::string::npos.,PVS-Studio
789,The size of the dynamic array can be less than the number of elements in the initializer.,PVS-Studio
563,The variable is assigned but is not used by the end of the function.,PVS-Studio
665,"A class, containing pointers, constructor and destructor, is copied by the automatically generated operator= or copy constructor.",PVS-Studio
628,The pointer was used unsafely after it was verified against nullptr.,PVS-Studio
404,The resource was acquired using 'X' function but was released using incompatible 'Y' function.,PVS-Studio
675,Several shared_ptr objects are initialized by the same pointer. A double memory deallocation will occur.,PVS-Studio
457,The value from the uninitialized optional is used. Probably it is a mistake.,PVS-Studio
691,Consider inspecting the 'for' operator. No more than one iteration of the loop will be performed.,PVS-Studio
665,Check the array initialization. Only the first element is initialized explicitly.,PVS-Studio
20,Unchecked tainted data is used in expression.,PVS-Studio
192,The expression is always false. Overflow check is incorrect.,PVS-Studio
670,Suspicious subexpression in a sequence of similar comparisons.,PVS-Studio
682,Structures with members of real type are compared byte-wise.,PVS-Studio
480,Suspicious simultaneous use of bitwise and logical operators.,PVS-Studio
681,The value is out of range of enum values. This causes unspecified or undefined behavior.,PVS-Studio
416,Variable of the 'string_view' type references a temporary object which will be removed after evaluation of an expression.,PVS-Studio
833,"Usage of a suspicious mutex wrapper. It is probably unused, uninitialized, or already locked.",PVS-Studio
480,Compound assignment expression is used inside condition.,PVS-Studio
772,Function exited without performing epilogue actions. It is possible that there is an error.,PVS-Studio
835,The variable is assigned the same value on several loop iterations.,PVS-Studio
755,An exception was thrown by pointer. Consider throwing it by value instead.,PVS-Studio
460,A pointer without owner is added to the container by the 'emplace_back' method. A memory leak will occur in case of an exception.,PVS-Studio
20,"The stream is checked for EOF before reading from it, but is not checked after reading. Potential use of invalid data.",PVS-Studio
820,"Rather than creating 'std::unique_lock' to lock on the mutex, a new variable with default value is created.",PVS-Studio
190,The variable is incremented in the loop. Undefined behavior will occur in case of signed integer overflow.,PVS-Studio
704,Pointer to an object of the class is cast to unrelated class.,PVS-Studio
190,"Possible overflow. Consider casting operands, not the result.",PVS-Studio
197,Numeric Truncation Error. Return value of function is written to N-bit variable.,PVS-Studio
843,Pointer is cast to a more strictly aligned pointer type.,PVS-Studio
834,Do not use real-type variables as loop counters.,PVS-Studio
609,Potentially unsafe double-checked locking.,PVS-Studio
691,Two or more case-branches perform the same actions.,PVS-Studio
468,It's odd that a char or string literal is added to a pointer.,PVS-Studio
825,Class member is initialized with dangling reference.,PVS-Studio
1177,"This file is marked with copyleft license, which requires you to open the derived source code.",PVS-Studio
834,Loop break conditions do not depend on the number of iterations.,PVS-Studio
703,The DllMain function throws an exception. Consider wrapping the throw operator in a try..catch block.,PVS-Studio
682,Unsafe usage of the 'bool' and integer types together in the operation '&='.,PVS-Studio
672,Lifetime of the lambda is greater than lifetime of the local variable captured by reference.,PVS-Studio
1164,Variable 'foo' was assigned the same value.,PVS-Studio
457,The uninitialized class member is used when initializing the base class.,PVS-Studio
754,Consider checking for misprints. It's possible that an assigned variable should be checked in the next condition.,PVS-Studio
131,"The 'sizeof' expression returns the size of the container type, not the number of elements. Consider using the 'size()' function.",PVS-Studio
337,Pseudo random sequence is the same at every program run. Consider assigning the seed to a value not known at compile-time.,PVS-Studio
1025,Nonsensical comparison of two different functions' addresses.,PVS-Studio
682,The modulo by 1 operation is meaningless. The result will always be zero.,PVS-Studio
477,Consider using the extended version of the 'foo' function here.,PVS-Studio
477,Consider using the 'Ptr' version of the 'foo' function here.,PVS-Studio
681,Explicit conversion from 'float/double' type to signed integer type.,PVS-Studio
681,Explicit conversion from 'float/double' type to unsigned integer type.,PVS-Studio
480,This expression can be simplified. One of the operands in the operation equals NN. Probably it is a mistake.,PVS-Studio
407,Cyclomatic complexity: NN. Consider refactoring the 'Foo' function.,PVS-Studio
704,Consider inspecting the correctness of handling the N argument in the 'Foo' function.,PVS-Studio
676,MISRA. The function with the 'abort/exit/getenv/system' name should not be used.,PVS-Studio
676,MISRA. The function with the 'qsort/bsearch' name should not be used.,PVS-Studio
676,MISRA. Memory allocation and deallocation functions should not be used.,PVS-Studio
676,MISRA. The macro with the 'setjmp' name and the function with the 'longjmp' name should not be used.,PVS-Studio
676,MISRA. Unbounded functions performing string operations should not be used.,PVS-Studio
478,MISRA. The 'switch' statement should have 'default' as the last label.,PVS-Studio
571,There are identical sub-expressions to the left and to the right of the 'foo' operator.,PVS-Studio
570,The use of 'if (A) {...} else if (A) {...}' pattern was detected. There is a probability of logical error presence.,PVS-Studio
691,The 'then' statement is equivalent to the 'else' statement.,PVS-Studio
390,The object was created but it is not being used. The 'throw' keyword could be missing.,PVS-Studio
691,Odd semicolon ';' after 'if/for/while' operator.,PVS-Studio
563,The 'x' variable is assigned values twice successively. Perhaps this is a mistake.,PVS-Studio
393,It's odd that this method always returns one and the same value of NN.,PVS-Studio
252,The return value of function 'Foo' is required to be utilized.,PVS-Studio
570,Two opposite conditions were encountered. The second condition is always false.,PVS-Studio
783,"The '?:' operator, regardless of its conditional expression, always returns one and the same value.",PVS-Studio
691,It is likely that a wrong variable is being incremented inside the 'for' operator. Consider reviewing 'X'.,PVS-Studio
691,It is likely that a wrong variable is being compared inside the 'for' operator. Consider reviewing 'X'.,PVS-Studio
691,The variable 'X' is being used for this loop and for the outer loop.,PVS-Studio
670,Consider inspecting the application's logic. It's possible that 'else' keyword is missing.,PVS-Studio
697,It is possible that an incorrect variable is compared with null after type conversion using 'as' keyword.,PVS-Studio
670,An unconditional 'break/continue/return/goto' within a loop.,PVS-Studio
561,There are two 'if' statements with identical conditional expressions. The first 'if' statement contains method return. This means that the second 'if' statement is senseless.,PVS-Studio
571,Expression is always true/false.,PVS-Studio
571,Consider inspecting this expression. The expression is excessive or contains a misprint.,PVS-Studio
682,An odd precise comparison. Consider using a comparison with defined precision: Math.Abs(A - B) < Epsilon or Math.Abs(A - B) > Epsilon.,PVS-Studio
685,Incorrect format. Consider checking the N format items of the 'Foo' function.,PVS-Studio
476,The variable was utilized in the logical expression before it was verified against null in the same logical expression.,PVS-Studio
691,Consider inspecting the 'for' operator. Initial and final values of the iterator are the same.,PVS-Studio
571,Recurring check. This condition was already verified in previous line.,PVS-Studio
835,"Waiting on this expression is unreliable, as compiler may optimize some of the variables. Use volatile variable(s) or synchronization primitives to avoid this.",PVS-Studio
670,It is possible that this 'else' branch must apply to the previous 'if' statement.,PVS-Studio
480,Consider inspecting the expression. Probably the '!=' should be used here.,PVS-Studio
480,Consider inspecting the expression. Probably the '+=' should be used here.,PVS-Studio
480,Consider inspecting the expression. Probably the '-=' should be used here.,PVS-Studio
687,The argument was passed to method several times. It is possible that another argument should be passed instead.,PVS-Studio
39,Consider inspecting the 'Foo' function call. Defining an absolute path to the file or directory is considered a poor style.,PVS-Studio
682,The expression contains a suspicious mix of integer and real types.,PVS-Studio
682,The expression was implicitly cast from integer type to real type. Consider utilizing an explicit type cast to avoid the loss of a fractional part.,PVS-Studio
476,Possible NullReferenceException. The '?.' and '.' operators are used for accessing members of the same object.,PVS-Studio
483,The code's operational logic does not correspond with its formatting.,PVS-Studio
704,An excessive type cast or check. The object is already of the same type.,PVS-Studio
390,The original exception object was swallowed. Stack of original exception could be lost.,PVS-Studio
609,Potentially unsafe double-checked locking. Use volatile variable(s) or synchronization primitives to avoid this.,PVS-Studio
481,Suspicious assignment inside the condition expression of 'if/while/for' operator.,PVS-Studio
682,Consider reviewing the correctness of 'X' item's usage.,PVS-Studio
628,Function receives an odd argument.,PVS-Studio
462,An item with the same key has already been added.,PVS-Studio
682,A value of variable is not modified. Consider inspecting the expression. It is possible that other value should be present instead of '0'.,PVS-Studio
571,A part of conditional expression is always true/false if it is evaluated.,PVS-Studio
369,Division or mod division by zero.,PVS-Studio
683,Possible incorrect order of arguments passed to method.,PVS-Studio
691,"It is possible that 'else' block was forgotten or commented out, thus altering the program's operation logics.",PVS-Studio
670,"It's possible that the line was commented out improperly, thus altering the program's operation logics.",PVS-Studio
457,Uninitialized variables are used when initializing the 'A' variable.,PVS-Studio
571,Comparison with 'double.NaN' is meaningless. Use 'double.IsNaN()' method instead.,PVS-Studio
476,Possible null dereference.,PVS-Studio
563,The 'Thread' object is created but is not started. It is possible that a call to 'Start' method is missing.,PVS-Studio
367,"Unsafe invocation of event, NullReferenceException is possible. Consider assigning event to a local variable before invoking it.",PVS-Studio
665,Initializer of a field marked by [ThreadStatic] attribute will be called once on the first accessing thread. The field will have default value on different threads.,PVS-Studio
833,Unsafe locking on an object.,PVS-Studio
670,Range intersections are possible within conditional expressions.,PVS-Studio
480,The operator evaluates both operands. Perhaps a short-circuit operator should be used instead.,PVS-Studio
476,"The object was used before it was verified against null. Check lines: N1, N2.",PVS-Studio
670,The 'continue' operator will terminate 'do { ... } while (false)' loop because the condition is always false.,PVS-Studio
684,Not all the members of type are serialized inside 'GetObjectData' method.,PVS-Studio
476,NullReferenceException is possible. Unhandled exceptions in destructor lead to termination of runtime.,PVS-Studio
690,The 'a' variable was used after it was assigned through null-conditional operator. NullReferenceException is possible.,PVS-Studio
787,Possibly index is out of bound.,PVS-Studio
684,It is not recommended to return null or throw exceptions from 'ToString()' method.,PVS-Studio
674,Possible infinite recursion.,PVS-Studio
697,An abnormality within similar comparisons. It is possible that a typo is present inside the expression.,PVS-Studio
190,Consider inspecting the loop expression. It is possible that different variables are used inside initializer and iterator.,PVS-Studio
404,IDisposable object is not disposed before method returns.,PVS-Studio
684,It is not recommended to throw exceptions from 'Equals(object obj)' method.,PVS-Studio
835,Consider inspecting the 'for' operator. It's possible that the loop will be executed incorrectly or won't be executed at all.,PVS-Studio
835,Potentially infinite loop. The variable from the loop exit condition does not change its value between iterations.,PVS-Studio
570,Uppercase (lowercase) string is compared with a different lowercase (uppercase) string.,PVS-Studio
783,Perhaps the '??' operator works in a different way than it was expected. Its priority is lower than priority of other operators in its left part.,PVS-Studio
476,"The object was used after it was verified against null. Check lines: N1, N2.",PVS-Studio
682,"Two similar code fragments were found. Perhaps, this is a typo and 'X' variable should be used instead of 'Y'.",PVS-Studio
665,The field (property) is used before it is initialized in constructor.,PVS-Studio
704,"The expression is checked for compatibility with the type 'A', but is casted to the 'B' type.",PVS-Studio
665,A terminal null is present inside a string. The '\0xNN' characters were encountered. Probably meant: '\xNN'.,PVS-Studio
682,Postfix increment/decrement is senseless because this variable is overwritten.,PVS-Studio
128,Shift by N bits is greater than the size of type.,PVS-Studio
691,The initial value of the index in the nested loop equals 'i'. Consider using 'i + 1' instead.,PVS-Studio
691,Constant expression in switch statement.,PVS-Studio
563,The variable is assigned but is not used by the end of the function.,PVS-Studio
561,Unreachable code detected. It is possible that an error is present.,PVS-Studio
476,Unsafe dereference of a WeakReference target. The object could have been garbage collected before the 'Target' property was accessed.,PVS-Studio
476,Possible null dereference. A method can return default null value.,PVS-Studio
567,Non-atomic modification of volatile variable.,PVS-Studio
476,Casting potential 'null' value to a value type can lead to NullReferenceException.,PVS-Studio
476,Dereferencing the result of 'as' operator can lead to NullReferenceException.,PVS-Studio
369,"Potential division by zero. Variable was used as a divisor before it was compared to zero. Check lines: N1, N2.",PVS-Studio
476,"Potential division by zero. Variable was compared to zero before it was used as a divisor. Check lines: N1, N2.",PVS-Studio
476,Dereferencing the result of null-conditional access operator can lead to NullReferenceException. Consider removing parentheses around null-conditional access expression.,PVS-Studio
682,The 'a % b' expression always evaluates to 0.,PVS-Studio
682,The expression is incorrect or it can be simplified.,PVS-Studio
571,There are identical sub-expressions to the left and to the right of the 'foo' operator.,PVS-Studio
570,The use of 'if (A) {...} else if (A) {...}' pattern was detected. There is a probability of logical error presence.,PVS-Studio
691,The 'then' statement is equivalent to the 'else' statement.,PVS-Studio
390,The object was created but it is not being used. The 'throw' keyword could be missing.,PVS-Studio
571,Expression is always true/false.,PVS-Studio
690,Potential null dereference.,PVS-Studio
628,Function receives an odd argument.,PVS-Studio
252,The return value of function 'Foo' is required to be utilized.,PVS-Studio
682,The expression contains a suspicious mix of integer and real types.,PVS-Studio
783,"The '?:' operator, regardless of its conditional expression, always returns one and the same value.",PVS-Studio
595,"Comparison of arrays, strings, collections by reference. Possibly an equality comparison was intended.",PVS-Studio
393,It's odd that this method always returns one and the same value of NN.,PVS-Studio
480,Consider inspecting the expression. Probably the '!='/'-='/'+=' should be used here.,PVS-Studio
691,Constant expression in switch statement.,PVS-Studio
561,Unreachable code detected. It is possible that an error is present.,PVS-Studio
369,Division or mod division by zero.,PVS-Studio
563,The value is assigned to the 'x' variable but is not used.,PVS-Studio
670,The 'continue' operator will terminate 'do { ... } while (false)' loop because the condition is always false.,PVS-Studio
125,Possibly index is out of bound.,PVS-Studio
683,Possible incorrect order of arguments passed to method.,PVS-Studio
691,The function located to the right of the '|' and '&' operators will be called regardless of the value of the left operand. Consider using '||' and '&&' instead.,PVS-Studio
691,The variable 'X' is being used for this loop and for the outer loop.,PVS-Studio
462,An item with the same key has already been added.,PVS-Studio
758,Shift by N bits is inconsistent with the size of type.,PVS-Studio
457,The value from the uninitialized optional is used.,PVS-Studio
670,An unconditional 'break/continue/return/goto' within a loop.,PVS-Studio
570,Comparison with 'double.NaN' is meaningless. Use 'double.isNaN()' method instead.,PVS-Studio
561,There are two 'if' statements with identical conditional expressions. The first 'if' statement contains method return. This means that the second 'if' statement is senseless.,PVS-Studio
483,The code's operational logic does not correspond with its formatting.,PVS-Studio
481,Suspicious assignment inside the conditional expression of 'if/while/do...while' statement.,PVS-Studio
704,"The expression is checked for compatibility with type 'A', but is cast to type 'B'.",PVS-Studio
691,Consider inspecting the 'for' operator. Initial and final values of the iterator are the same.,PVS-Studio
682,Postfix increment/decrement is senseless because this variable is overwritten.,PVS-Studio
686,Incorrect format. Consider checking the N format items of the 'Foo' function.,PVS-Studio
670,It is possible that this 'else' branch must apply to the previous 'if' statement.,PVS-Studio
480,This expression can be simplified. One of the operands in the operation equals NN. Probably it is a mistake.,PVS-Studio
665,Class initialization cycle is present.,PVS-Studio
584,Use of jump statements in 'finally' block can lead to the loss of unhandled exceptions.,PVS-Studio
486,Classes should not be compared by their name.,PVS-Studio
571,Consider inspecting this expression. The expression is excessive or contains a misprint.,PVS-Studio
1024,Comparing objects of incompatible types.,PVS-Studio
185,"Odd use of special character in regular expression. Possibly, it was intended to be escaped.",PVS-Studio
476,The reference was used before it was verified against null.,PVS-Studio
682,The used constant value is represented by an octal form.,PVS-Studio
674,Possible infinite recursion.,PVS-Studio
670,Odd semicolon ';' after 'if/foreach' operator.,PVS-Studio
572,Suspicious invocation of Thread.run().,PVS-Studio
691,Two or more case-branches perform the same actions.,PVS-Studio
662,Unsafe synchronization on an object.,PVS-Studio
682,"Two similar code fragments were found. Perhaps, this is a typo and 'X' variable should be used instead of 'Y'.",PVS-Studio
684,It is not recommended to return null or throw exceptions from 'toString' / 'clone' methods.,PVS-Studio
567,Non-atomic modification of volatile variable.,PVS-Studio
684,The signature of method 'X' does not conform to serialization requirements.,PVS-Studio
478,A suspicious label is present inside a switch(). It is possible that these are misprints and 'default:' label should be used instead.,PVS-Studio
129,"Value of variable is checked after use. Potential logical error is present. Check lines: N1, N2.",PVS-Studio
754,Consider checking for misprints. It's possible that an assigned variable should be checked in the next condition.,PVS-Studio
609,Unsafe double-checked locking.,PVS-Studio
697,An abnormality within similar comparisons. It is possible that a typo is present inside the expression.,PVS-Studio
670,Suspicious code formatting. 'else' keyword is probably missing.,PVS-Studio
670,"It's possible that the line was commented out improperly, thus altering the program's operation logics.",PVS-Studio
665,Field 'A' is being used before it was initialized.,PVS-Studio
476,Automatic unboxing of a variable may cause NullPointerException.,PVS-Studio
